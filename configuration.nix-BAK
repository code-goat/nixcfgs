# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, lib, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./services/gitea.nix
    ];

  # Podman Backend
  virtualisation.oci-containers.backend = "podman";
  
  # //CUSTOM FIXES
    # Network Manager Fix	
  	  systemd.services.NetworkManager-wait-online.enable = false;

  # //BOOT
    # Bootloader
      boot.loader.systemd-boot.enable = true;
      boot.loader.efi.canTouchEfiVariables = true;

  # //NETWORKING
  	# Enable networking
      networking.networkmanager.enable = true;
    
    # Firewall
  	  networking.firewall.enable = false;

	  # WoL (Wake-on-LAN) Support
	    powerManagement.enable = true;
      networking.interfaces.tailscale0.wakeOnLan.enable = true;
      networking.interfaces.enp2s0.wakeOnLan.enable = true;
      networking.hostName = "nixos"; # Define Hostname

    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

    # Configure network proxy if necessary
      # networking.proxy.default = "http://user:password@proxy:port/";
      # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
        
    # Set your time zone.
      time.timeZone = "America/Los_Angeles";
    
    # Select internationalisation properties.
      i18n.defaultLocale = "en_US.UTF-8";
    
      i18n.extraLocaleSettings = {
        LC_ADDRESS = "en_US.UTF-8";
        LC_IDENTIFICATION = "en_US.UTF-8";
        LC_MEASUREMENT = "en_US.UTF-8";
        LC_MONETARY = "en_US.UTF-8";
        LC_NAME = "en_US.UTF-8";
        LC_NUMERIC = "en_US.UTF-8";
        LC_PAPER = "en_US.UTF-8";
        LC_TELEPHONE = "en_US.UTF-8";
        LC_TIME = "en_US.UTF-8";
       };
	

  # //SERVICES
  	# JELLYFIN
 	    services.jellyfin.enable = true;
 	    services.jellyfin.openFirewall = true;
 	    users.groups.storage.members = [ "jellyfin" ];

    # JELLYFIN External Drive Mounting
      fileSystems."/MEDIA".options = [ "nofail" ];
      users.users.jellyfin.extraGroups = [ "MEDIA" ];
 
  # //FONTS
    fonts.fontDir.enable = true;
    fonts = {
        fonts = with pkgs; [
          noto-fonts
          noto-fonts-cjk
          noto-fonts-emoji
          font-awesome
          source-han-sans
          source-han-sans-japanese
          source-han-serif-japanese
        (nerdfonts.override { fonts = [ "Meslo" ]; })
       ];
      fontconfig = {
         enable = true;
         defaultFonts = {
  	        monospace = [ "Meslo LG M Regular Nerd Font Complete Mono" ];
  	        serif = [ "Noto Serif" "Source Han Serif" ];
  	        sansSerif = [ "Noto Sans" "Source Han Sans" ];
        };
      };
    };


  # Enable the nix command and flakes
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };

  # Enable Flatpak support
  services.flatpak.enable = true;
 
  # Setup keyfile
  boot.initrd.secrets = {
    "/crypto_keyfile.bin" = null;
 
  };

  # SYSTEM //

  	# DRIVES & FILESYSTEMS
  	# AutoMount External Drive
  	 fileSystems."/MEDIA" = {
  	 device = "/dev/disk/by-uuid/9b61fa32-d6dd-4184-8d2f-82c91a3eb584";
  	 fsType = "btrfs";
  	 };
  	# Enable swap on luks
  	 boot.initrd.luks.devices."luks-b61660f2-8bc6-4445-b072-488d2044c102".device = "/dev/disk/by-uuid/b61660f2-8bc6-4445-b072-488d2044c102";
  	 boot.initrd.luks.devices."luks-b61660f2-8bc6-4445-b072-488d2044c102".keyFile = "/crypto_keyfile.bin";
 

  # Enable the X11 windowing system.
  services.xserver.enable = true;
  services.xserver.videoDrivers = [ "amdgpu" ];
  services.tailscale.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = "us";
    xkbVariant = "";
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
   services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.common = {
    isNormalUser = true;
    description = "common";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      firefox
      kate
      librewolf
      libsForQt5.yakuake

    ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    element-desktop
    git
    bitwarden
    google-fonts
    corefonts
    #protonvpn-gui
    neovim
    micro
    unzip
    filelight
    virt-manager
    vscodium
    (vscode-with-extensions.override {
      vscode = vscodium;
      vscodeExtensions = with vscode-extensions; [
        antyos.openscad
        jnoortheen.nix-ide
      ] ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [
      ];
    })
    gnupg
    direnv
    gparted
    btrfs-progs
    #xorg.xf86videoamdgpu
    ffmpeg
    vlc
    jellyfin-ffmpeg
    tldr
    anytype
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };

  # User added programs services
  programs.git.enable = true;
  programs.partition-manager.enable = true;
  programs.kdeconnect.enable = true;
  programs.fish.enable = true;

  # List services that you want to enable:
  
  # DOCKER
  #virtualisation.docker.rootless.enable = true;
  #virtualisation.libvirtd.enable = true;
  #virtualisation.docker.enable = true;

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?
   
  zramSwap.enable = true;

}

